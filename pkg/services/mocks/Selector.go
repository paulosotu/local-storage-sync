// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	labels "k8s.io/apimachinery/pkg/labels"
)

// Selector is an autogenerated mock type for the Selector type
type Selector struct {
	mock.Mock
}

// Add provides a mock function with given fields: r
func (_m *Selector) Add(r ...labels.Requirement) labels.Selector {
	_va := make([]interface{}, len(r))
	for _i := range r {
		_va[_i] = r[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 labels.Selector
	if rf, ok := ret.Get(0).(func(...labels.Requirement) labels.Selector); ok {
		r0 = rf(r...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(labels.Selector)
		}
	}

	return r0
}

// DeepCopySelector provides a mock function with given fields:
func (_m *Selector) DeepCopySelector() labels.Selector {
	ret := _m.Called()

	var r0 labels.Selector
	if rf, ok := ret.Get(0).(func() labels.Selector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(labels.Selector)
		}
	}

	return r0
}

// Empty provides a mock function with given fields:
func (_m *Selector) Empty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Matches provides a mock function with given fields: _a0
func (_m *Selector) Matches(_a0 labels.Labels) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(labels.Labels) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Requirements provides a mock function with given fields:
func (_m *Selector) Requirements() (labels.Requirements, bool) {
	ret := _m.Called()

	var r0 labels.Requirements
	if rf, ok := ret.Get(0).(func() labels.Requirements); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(labels.Requirements)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// RequiresExactMatch provides a mock function with given fields: label
func (_m *Selector) RequiresExactMatch(label string) (string, bool) {
	ret := _m.Called(label)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *Selector) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
