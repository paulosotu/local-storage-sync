// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	labels "k8s.io/apimachinery/pkg/labels"
	corev1 "k8s.io/client-go/listers/core/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// PersistentVolumeClaimLister is an autogenerated mock type for the PersistentVolumeClaimLister type
type PersistentVolumeClaimLister struct {
	mock.Mock
}

// List provides a mock function with given fields: selector
func (_m *PersistentVolumeClaimLister) List(selector labels.Selector) ([]*v1.PersistentVolumeClaim, error) {
	ret := _m.Called(selector)

	var r0 []*v1.PersistentVolumeClaim
	if rf, ok := ret.Get(0).(func(labels.Selector) []*v1.PersistentVolumeClaim); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.PersistentVolumeClaim)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(labels.Selector) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistentVolumeClaims provides a mock function with given fields: namespace
func (_m *PersistentVolumeClaimLister) PersistentVolumeClaims(namespace string) corev1.PersistentVolumeClaimNamespaceLister {
	ret := _m.Called(namespace)

	var r0 corev1.PersistentVolumeClaimNamespaceLister
	if rf, ok := ret.Get(0).(func(string) corev1.PersistentVolumeClaimNamespaceLister); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.PersistentVolumeClaimNamespaceLister)
		}
	}

	return r0
}
